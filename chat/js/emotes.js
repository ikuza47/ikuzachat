// –ö—ç—à —ç–º–æ–¥–∑–∏
const emotesCache = {
    twitch: {},
    bttv: {},
    ffz: {},
    '7tv': {}
};

// –ó–∞–≥—Ä—É–∑–∫–∞ Twitch —ç–º–æ–¥–∑–∏
async function loadTwitchEmotes(channelId) {
    if (emotesCache.twitch[channelId]) {
        console.log(`‚ÑπÔ∏è Twitch —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        return emotesCache.twitch[channelId];
    }

    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ Twitch —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: ${channelId}`);
        const response = await fetch(`https://api.ivr.fi/v2/twitch/emotes/channel/${channelId}`);
        
        if (!response.ok) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 404, –≤–æ–∑–º–æ–∂–Ω–æ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
            if (response.status === 404) {
                console.log(`‚ÑπÔ∏è –£ –∫–∞–Ω–∞–ª–∞ ${channelId} –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Twitch —ç–º–æ–¥–∑–∏`);
                return {};
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã Twitch —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, data);
        
        const emotes = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏
        if (data.global) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.global.length} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö Twitch —ç–º–æ–¥–∑–∏`);
            for (const emote of data.global) {
                emotes[emote.code] = {
                    url: emote.emoteSet === 'global' ? 
                        `https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/3.0` :
                        `https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/2.0`,
                    type: 'twitch'
                };
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞
        if (data.channel) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.channel.length} —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞`);
            for (const emote of data.channel) {
                emotes[emote.code] = {
                    url: `https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/2.0`,
                    type: 'twitch'
                };
            }
        }
        
        emotesCache.twitch[channelId] = emotes;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(emotes).length} Twitch —ç–º–æ–¥–∑–∏`);
        return emotes;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Twitch —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
        return {};
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ BTTV —ç–º–æ–¥–∑–∏
async function loadBTTVEmotes(channelName) {
    // –î–ª—è BTTV –Ω—É–∂–µ–Ω –Ω–µ ID, –∞ –∏–º—è –∫–∞–Ω–∞–ª–∞
    if (emotesCache.bttv[channelName]) {
        console.log(`‚ÑπÔ∏è BTTV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        return emotesCache.bttv[channelName];
    }

    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ BTTV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: ${channelName}`);
        const response = await fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelName}`);
        
        if (!response.ok) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 404, –≤–æ–∑–º–æ–∂–Ω–æ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç BTTV —ç–º–æ–¥–∑–∏
            if (response.status === 404) {
                console.log(`‚ÑπÔ∏è –£ –∫–∞–Ω–∞–ª–∞ ${channelName} –Ω–µ—Ç BTTV —ç–º–æ–¥–∑–∏`);
                return {};
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã BTTV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName}:`, data);
        
        const emotes = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ BTTV —ç–º–æ–¥–∑–∏
        if (data?.sharedEmotes) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.sharedEmotes.length} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö BTTV —ç–º–æ–¥–∑–∏`);
            for (const emote of data.sharedEmotes) {
                emotes[emote.code] = {
                    url: `https://cdn.betterttv.net/emote/${emote.id}/3x`,
                    type: 'bttv'
                };
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞
        if (data?.channelEmotes) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.channelEmotes.length} —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞ BTTV`);
            for (const emote of data.channelEmotes) {
                emotes[emote.code] = {
                    url: `https://cdn.betterttv.net/emote/${emote.id}/3x`,
                    type: 'bttv'
                };
            }
        }
        
        emotesCache.bttv[channelName] = emotes;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(emotes).length} BTTV —ç–º–æ–¥–∑–∏`);
        return emotes;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BTTV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName}:`, error);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
            const response = await fetch(`https://api.betterttv.net/3/emotes/shared/twitch/${channelName}`);
            
            if (!response.ok) {
                if (response.status === 404) {
                    console.log(`‚ÑπÔ∏è –£ –∫–∞–Ω–∞–ª–∞ ${channelName} –Ω–µ—Ç BTTV —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥`);
                    return {};
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã BTTV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName} —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥:`, data);
            
            const emotes = {};
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞
            if (data?.emotes) {
                console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.emotes.length} —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞ BTTV —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥`);
                for (const emote of data.emotes) {
                    emotes[emote.code] = {
                        url: `https://cdn.betterttv.net/emote/${emote.id}/3x`,
                        type: 'bttv'
                    };
                }
            }
            
            emotesCache.bttv[channelName] = emotes;
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(emotes).length} BTTV —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥`);
            return emotes;
        } catch (altError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BTTV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName} —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥:`, altError);
            return {};
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ FFZ —ç–º–æ–¥–∑–∏
async function loadFFZEmotes(channelName) {
    // –î–ª—è FFZ –Ω—É–∂–µ–Ω –Ω–µ ID, –∞ –∏–º—è –∫–∞–Ω–∞–ª–∞
    if (emotesCache.ffz[channelName]) {
        console.log(`‚ÑπÔ∏è FFZ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        return emotesCache.ffz[channelName];
    }

    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ FFZ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: ${channelName}`);
        const response = await fetch(`https://api.frankerfacez.com/v1/room/${channelName}`);
        
        if (!response.ok) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 404, –≤–æ–∑–º–æ–∂–Ω–æ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç FFZ —ç–º–æ–¥–∑–∏
            if (response.status === 404) {
                console.log(`‚ÑπÔ∏è –£ –∫–∞–Ω–∞–ª–∞ ${channelName} –Ω–µ—Ç FFZ —ç–º–æ–¥–∑–∏`);
                return {};
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã FFZ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName}:`, data);
        
        const emotes = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ FFZ —ç–º–æ–¥–∑–∏
        if (data?.sets?.[3]?.emoticons) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.sets[3].emoticons.length} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö FFZ —ç–º–æ–¥–∑–∏`);
            for (const emote of data.sets[3].emoticons) {
                emotes[emote.name] = {
                    url: emote.urls['4'] || emote.urls['2'] || emote.urls['1'],
                    type: 'ffz'
                };
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞
        if (data?.room?.set && data?.sets?.[data.room.set]?.emoticons) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.sets[data.room.set].emoticons.length} —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞ FFZ`);
            for (const emote of data.sets[data.room.set].emoticons) {
                emotes[emote.name] = {
                    url: emote.urls['4'] || emote.urls['2'] || emote.urls['1'],
                    type: 'ffz'
                };
            }
        }
        
        emotesCache.ffz[channelName] = emotes;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(emotes).length} FFZ —ç–º–æ–¥–∑–∏`);
        return emotes;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FFZ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelName}:`, error);
        return {};
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ 7TV —ç–º–æ–¥–∑–∏
async function load7TVEmotes(channelId) {
    // –î–ª—è 7TV –Ω—É–∂–µ–Ω ID –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ –∏–º—è
    if (emotesCache['7tv'][channelId]) {
        console.log(`‚ÑπÔ∏è 7TV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        return emotesCache['7tv'][channelId];
    }

    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ 7TV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: ${channelId}`);
        const response = await fetch(`https://7tv.io/v3/users/twitch/${channelId}`);
        
        if (!response.ok) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 404, –≤–æ–∑–º–æ–∂–Ω–æ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç 7TV —ç–º–æ–¥–∑–∏
            if (response.status === 404) {
                console.log(`‚ÑπÔ∏è –£ –∫–∞–Ω–∞–ª–∞ ${channelId} –Ω–µ—Ç 7TV —ç–º–æ–¥–∑–∏`);
                return {};
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã 7TV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, data);
        
        const emotes = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞
        if (data?.emote_set?.emotes) {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${data.emote_set.emotes.length} 7TV —ç–º–æ–¥–∑–∏`);
            for (const emote of data.emote_set.emotes) {
                emotes[emote.name] = {
                    url: `https://cdn.7tv.app/emote/${emote.id}/2x`,
                    type: '7tv'
                };
            }
        }
        
        emotesCache['7tv'][channelId] = emotes;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(emotes).length} 7TV —ç–º–æ–¥–∑–∏`);
        return emotes;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 7TV —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
        return {};
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ Twitch user ID —á–µ—Ä–µ–∑ API
async function getTwitchUserId(username) {
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Twitch user ID –¥–ª—è: ${username}`);
        const response = await fetch(`https://api.ivr.fi/v2/twitch/user?login=${username}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, data);
        
        if (data && data[0] && data[0].id) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω Twitch user ID: ${data[0].id} –¥–ª—è ${username}`);
            return data[0].id;
        }
        
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Twitch user ID –¥–ª—è: ${username}`);
        return null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitch user ID –¥–ª—è ${username}:`, error);
        return null;
    }
}

// –ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
function replaceEmotes(text, channelId, channelName) {
    if (!text) {
        console.log('‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–º–æ–¥–∑–∏');
        return text;
    }
    
    console.log(`üîç –ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ: "${text}"`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏
    const twitchEmotes = emotesCache.twitch[channelId] || {};
    const bttvEmotes = emotesCache.bttv[channelName] || {};
    const ffzEmotes = emotesCache.ffz[channelName] || {};
    const sevenTVEmotes = emotesCache['7tv'][channelId] || {};
    
    console.log(`‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ —ç–º–æ–¥–∑–∏: Twitch=${Object.keys(twitchEmotes).length}, BTTV=${Object.keys(bttvEmotes).length}, FFZ=${Object.keys(ffzEmotes).length}, 7TV=${Object.keys(sevenTVEmotes).length}`);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
    const allEmotes = { ...twitchEmotes, ...bttvEmotes, ...ffzEmotes, ...sevenTVEmotes };
    
    if (Object.keys(allEmotes).length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã');
        return text;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –∫ —Å–∞–º—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º)
    const sortedEmotes = Object.keys(allEmotes).sort((a, b) => b.length - a.length);
    
    let replacedText = text;
    
    // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —ç–º–æ–¥–∑–∏
    for (const emote of sortedEmotes) {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        const regex = new RegExp(`\\b${escapeRegExp(emote)}\\b`, 'g');
        
        replacedText = replacedText.replace(regex, (match) => {
            const emoteData = allEmotes[emote];
            console.log(`‚úÖ –ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏: "${emote}" -> ${emoteData.url}`);
            return `<img src="${emoteData.url}" alt="${emote}" class="emote" loading="lazy" />`;
        });
    }
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã: "${replacedText}"`);
    return replacedText;
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ–¥–∑–∏
async function initEmotes(channel) {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ–¥–∑–∏...');
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
        const channelId = await getTwitchUserId(channel);
        if (!channelId) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞');
            return false;
        }
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —ç–º–æ–¥–∑–∏
        const [twitchEmotes, bttvEmotes, ffzEmotes, sevenTVEmotes] = await Promise.all([
            loadTwitchEmotes(channelId),
            loadBTTVEmotes(channel),
            loadFFZEmotes(channel),
            load7TVEmotes(channelId)
        ]);
        
        console.log(`‚úÖ –≠–º–æ–¥–∑–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—Å–µ–≥–æ: ${Object.keys(twitchEmotes).length + Object.keys(bttvEmotes).length + Object.keys(ffzEmotes).length + Object.keys(sevenTVEmotes).length}`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏:', error);
        return false;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —ç–º–æ–¥–∑–∏
function addEmotesStyles() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
    if (document.querySelector('style#emotes-styles')) {
        return;
    }
    
    const style = document.createElement('style');
    style.id = 'emotes-styles';
    style.textContent = `
        .emote {
            vertical-align: middle;
            height: ${parseInt(size) * 1.2}px;
            margin: 0 2px;
            border-radius: 2px;
        }
    `;
    document.head.appendChild(style);
    console.log('‚úÖ –°—Ç–∏–ª–∏ –¥–ª—è —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–æ–¥–∑–∏
function setupEmoteErrorHandling() {
    document.addEventListener('error', function(event) {
        if (event.target && event.target.classList && event.target.classList.contains('emote')) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–æ–¥–∑–∏: ${event.target.src}`);
            event.target.style.display = 'none';
        }
    }, true);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.emotes = {
    init: initEmotes,
    replace: replaceEmotes,
    addStyles: addEmotesStyles,
    setupErrorHandling: setupEmoteErrorHandling,
    loadTwitch: loadTwitchEmotes,
    loadBTTV: loadBTTVEmotes,
    loadFFZ: loadFFZEmotes,
    load7TV: load7TVEmotes,
    getTwitchUserId: getTwitchUserId
};

console.log('‚úÖ –ú–æ–¥—É–ª—å —ç–º–æ–¥–∑–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');