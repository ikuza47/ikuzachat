// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è osu! API –∫–ª—é—á–∞ –∏–∑ URL
function getOsuApiKey() {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.get('osuapi') || null;
    console.log('üîë OSU_API_KEY –∏–∑ URL:', key);
    return key;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª—é—á –∏–∑ URL
const OSU_API_KEY = getOsuApiKey();

if (!OSU_API_KEY) {
    console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω osu! API –∫–ª—é—á –≤ URL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ &osuapi=–≤–∞—à_–∫–ª—é—á');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è beatmapset_id –∏ beatmap_id –∏–∑ —Å—Å—ã–ª–∫–∏
function extractBeatmapIds(url) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É:', url);
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –∏—â–µ–º beatmapset_id –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ beatmap_id
    const match = url.match(/https?:\/\/osu\.ppy\.sh\/beatmapsets\/(\d+)(?:#(?:osu|taiko|fruits|mania)\/(\d+))?/);
    if (match) {
        const beatmapset_id = match[1];
        const beatmap_id = match[2] || null;

        if (beatmap_id) {
            console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω—ã ID: beatmapset_id =', beatmapset_id, ', beatmap_id =', beatmap_id);
            return { beatmapset_id, beatmap_id };
        } else {
            console.log('üìã –ò–∑–≤–ª–µ—á—ë–Ω —Ç–æ–ª—å–∫–æ beatmapset_id =', beatmapset_id, ', —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
            return { beatmapset_id, beatmap_id: null };
        }
    } else {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –≤ —Å—Å—ã–ª–∫–µ:', url);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ osu! API v1
async function getBeatmapInfo(beatmapset_id, beatmap_id = null) {
    if (!OSU_API_KEY) {
        console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω osu! API –∫–ª—é—á. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ.');
        return null;
    }

    let url;
    let isSpecificBeatmap = false;

    if (beatmap_id) {
        console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (b):', beatmap_id);
        url = `https://osu.ppy.sh/api/get_beatmaps?k=${OSU_API_KEY}&b=${beatmap_id}`;
        isSpecificBeatmap = true;
    } else {
        console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ beatmapset (s):', beatmapset_id);
        url = `https://osu.ppy.sh/api/get_beatmaps?k=${OSU_API_KEY}&s=${beatmapset_id}`;
    }

    try {
        const response = await fetch(url);
        console.log('üåê –û—Ç–≤–µ—Ç –æ—Ç API:', response.status);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
        if (data && data.length > 0) {
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ beatmap_id ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            if (isSpecificBeatmap) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', data[0]);
                return data[0];
            } else {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ beatmapset_id ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–∏–ª–∏ –ª—é–±—É—é)
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ beatmapset, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', data[0]);
                return data[0];
            }
        } else {
            console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API.');
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö osu! API:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function formatBeatmapParams(beatmap) {
    const ar = parseFloat(beatmap.diff_approach).toFixed(1);
    const cs = parseFloat(beatmap.diff_size).toFixed(1);
    const hp = parseFloat(beatmap.diff_drain).toFixed(1);
    const od = parseFloat(beatmap.diff_overall).toFixed(1);
    const bpm = parseFloat(beatmap.bpm).toFixed(1);
    const sr = parseFloat(beatmap.difficultyrating).toFixed(2);
    const params = `AR${ar} CS${cs} HP${hp} OD${od} BPM${bpm} ‚òÖ${sr}`;
    console.log('‚öôÔ∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', params);
    return params;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
async function replaceOsuLinksInText(text) {
    console.log('üìù –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç:', text);

    if (!OSU_API_KEY) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç osu! API –∫–ª—é—á–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.');
        return text; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    }

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ osu.ppy.sh
    const osuLinkRegex = /(https?:\/\/osu\.ppy\.sh\/beatmapsets\/\d+(?:#[a-z]+\/\d+)?)\b/g;

    const matches = [...text.matchAll(osuLinkRegex)];

    if (matches.length === 0) {
        console.log('üîó –ù–µ—Ç —Å—Å—ã–ª–æ–∫ osu! –≤ —Ç–µ–∫—Å—Ç–µ.');
        return text; // –ù–µ—Ç —Å—Å—ã–ª–æ–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }

    console.log('üîó –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏:', matches.map(m => m[0]));

    let resultText = text;

    for (const match of matches) {
        const fullUrl = match[0];
        const ids = extractBeatmapIds(fullUrl);
        if (!ids) continue;

        const { beatmapset_id, beatmap_id } = ids;

        const beatmapInfo = await getBeatmapInfo(beatmapset_id, beatmap_id);

        if (beatmapInfo) {
            const artist = beatmapInfo.artist;
            const title = beatmapInfo.title;
            const creator = beatmapInfo.creator;

            let replacement;

            if (beatmap_id) {
                // –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë
                const version = beatmapInfo.version;
                const params = formatBeatmapParams(beatmapInfo);
                replacement = `${artist} - ${title} (${creator}) - ${version} (${params})`;
            } else {
                // –°—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ beatmapset ‚Äî –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                replacement = `${artist} - ${title} (${creator})`;
            }

            console.log('üîÑ –ó–∞–º–µ–Ω—è–µ–º:', fullUrl, '‚Üí', replacement);
            resultText = resultText.replace(fullUrl, replacement);
        } else {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è: ${fullUrl}`);
        }
    }

    console.log('üì§ –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç:', resultText);
    return resultText;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.osuModule = {
    replaceOsuLinksInText
};