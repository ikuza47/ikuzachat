// –ö—ç—à –±–µ–π–¥–∂–∏–∫–æ–≤
const badgesCache = {
    global: {},
    channel: {}
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–∏–∫–æ–≤
async function loadGlobalBadges() {
    if (Object.keys(badgesCache.global).length > 0) {
        console.log('‚ÑπÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return badgesCache.global;
    }

    try {
        console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–∏–∫–æ–≤ —á–µ—Ä–µ–∑ ivr.fi...');
        const response = await fetch('https://api.ivr.fi/v2/twitch/badges/global');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏–∫–∏:', data);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        for (const badge of data) {
            badgesCache.global[badge.set_id] = {};
            
            for (const version of badge.versions) {
                badgesCache.global[badge.set_id][version.id] = {
                    image_url_1x: version.image_url_1x,
                    image_url_2x: version.image_url_2x,
                    image_url_4x: version.image_url_4x,
                    description: version.description || badge.set_id
                };
            }
        }
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(badgesCache.global).length} —Ç–∏–ø–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–∏–∫–æ–≤`);
        return badgesCache.global;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–∏–∫–æ–≤:', error);
        return {};
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
async function loadChannelBadges(channelId) {
    if (!channelId) {
        console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–∏–∫–æ–≤');
        return {};
    }
    
    if (badgesCache.channel[channelId]) {
        console.log(`‚ÑπÔ∏è –ë–µ–π–¥–∂–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channelId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        return badgesCache.channel[channelId];
    }

    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–π–¥–∂–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: ${channelId} —á–µ—Ä–µ–∑ ivr.fi`);
        const response = await fetch(`https://api.ivr.fi/v2/twitch/badges/channel/${channelId}`);
        
        if (!response.ok) {
            if (response.status === 404) {
                console.log(`‚ÑπÔ∏è –ë–µ–π–¥–∂–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                return {};
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã –±–µ–π–¥–∂–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, data);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const channelBadges = {};
        for (const badge of data) {
            channelBadges[badge.set_id] = {};
            
            for (const version of badge.versions) {
                channelBadges[badge.set_id][version.id] = {
                    image_url_1x: version.image_url_1x,
                    image_url_2x: version.image_url_2x,
                    image_url_4x: version.image_url_4x,
                    description: version.description || badge.set_id
                };
            }
        }
        
        badgesCache.channel[channelId] = channelBadges;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(channelBadges).length} —Ç–∏–ø–æ–≤ –±–µ–π–¥–∂–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞`);
        return channelBadges;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
        return {};
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ Twitch user ID —á–µ—Ä–µ–∑ API
async function getTwitchUserId(username) {
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Twitch user ID –¥–ª—è: ${username}`);
        const response = await fetch(`https://api.ivr.fi/v2/twitch/user?login=${username}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, data);
        
        if (data && data[0] && data[0].id) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω Twitch user ID: ${data[0].id} –¥–ª—è ${username}`);
            return data[0].id;
        }
        
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Twitch user ID –¥–ª—è: ${username}`);
        return null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitch user ID –¥–ª—è ${username}:`, error);
        return null;
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–π–¥–∂–∏–∫–æ–≤ –∏–∑ —Ç–µ–≥–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
function parseBadges(tags) {
    const badges = [];
    
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–π–¥–∂–∏–∫–æ–≤ –∏–∑ —Ç–µ–≥–æ–≤:', tags);
    
    // –ò—â–µ–º —Ç–µ–≥ badges –≤ —Å—Ç—Ä–æ–∫–µ
    const badgesMatch = tags.match(/badges=([^;]+)/);
    if (badgesMatch && badgesMatch[1]) {
        const badgesString = badgesMatch[1];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –±–µ–π–¥–∂–∏–∫–∏: ${badgesString}`);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏–∫–∏
        const badgePairs = badgesString.split(',');
        
        for (const pair of badgePairs) {
            if (!pair) continue;
            
            const [badgeType, version] = pair.split('/');
            if (badgeType && version) {
                console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–µ–π–¥–∂–∏–∫: ${badgeType} –≤–µ—Ä—Å–∏–∏ ${version}`);
                badges.push({ type: badgeType, version });
            } else {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–µ–π–¥–∂–∏–∫: ${pair}`);
            }
        }
    } else {
        console.log('‚ÑπÔ∏è –ë–µ–π–¥–∂–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–≥–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
    
    return badges;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–π–¥–∂–∏–∫–æ–≤
function createBadgesHtml(badges, size = '2', position = 'left') {
    if (!badges || badges.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –±–µ–π–¥–∂–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return '';
    }
    
    console.log(`üé® –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è ${badges.length} –±–µ–π–¥–∂–∏–∫–æ–≤ (—Ä–∞–∑–º–µ—Ä: ${size}x, –ø–æ–∑–∏—Ü–∏—è: ${position})`);
    
    let badgesHtml = '<div class="badges-container badges-position-' + position + '">';
    
    for (const badge of badges) {
        const url = getBadgeUrl(badge.type, badge.version, size);
        if (!url) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –±–µ–π–¥–∂–∏–∫ ${badge.type} –≤–µ—Ä—Å–∏–∏ ${badge.version} - URL –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            continue;
        }
        
        const description = getBadgeDescription(badge.type, badge.version);
        
        badgesHtml += `
            <img 
                src="${url}" 
                alt="${badge.type} ${badge.version}" 
                title="${description}" 
                class="badge"
                loading="lazy"
            />
        `;
    }
    
    badgesHtml += '</div>';
    console.log('‚úÖ HTML –¥–ª—è –±–µ–π–¥–∂–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    return badgesHtml;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–µ–π–¥–∂–∏–∫–∞
function getBadgeUrl(badgeType, version, size = '2') {
    console.log(`üîç –ü–æ–∏—Å–∫ URL –¥–ª—è –±–µ–π–¥–∂–∏–∫–∞: ${badgeType} –≤–µ—Ä—Å–∏–∏ ${version}, —Ä–∞–∑–º–µ—Ä: ${size}x`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏–∫–∏
    if (badgesCache.global[badgeType] && badgesCache.global[badgeType][version]) {
        const badge = badgesCache.global[badgeType][version];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂–∏–∫: ${badgeType} –≤–µ—Ä—Å–∏–∏ ${version}`);
        return badge[`image_url_${size}x`] || badge.image_url_2x;
    }
    
    // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–π–¥–∂–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
    for (const channelId in badgesCache.channel) {
        const channelBadges = badgesCache.channel[channelId];
        if (channelBadges[badgeType] && channelBadges[badgeType][version]) {
            const badge = channelBadges[badgeType][version];
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–µ–π–¥–∂–∏–∫ –∫–∞–Ω–∞–ª–∞ ${channelId}: ${badgeType} –≤–µ—Ä—Å–∏–∏ ${version}`);
            return badge[`image_url_${size}x`] || badge.image_url_2x;
        }
    }
    
    console.log(`‚ùå –ë–µ–π–¥–∂–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${badgeType} –≤–µ—Ä—Å–∏–∏ ${version}`);
    return null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–π–¥–∂–∏–∫–∞
function getBadgeDescription(badgeType, version) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏–∫–∏
    if (badgesCache.global[badgeType] && badgesCache.global[badgeType][version]) {
        return badgesCache.global[badgeType][version].description;
    }
    
    // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–π–¥–∂–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
    for (const channelId in badgesCache.channel) {
        const channelBadges = badgesCache.channel[channelId];
        if (channelBadges[badgeType] && channelBadges[badgeType][version]) {
            return channelBadges[badgeType][version].description;
        }
    }
    
    return badgeType;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–π–¥–∂–∏–∫–æ–≤
async function initBadges(channel) {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–π–¥–∂–∏–∫–æ–≤...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏–∫–∏
        await loadGlobalBadges();
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
        const channelId = await getTwitchUserId(channel);
        if (channelId) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–π–¥–∂–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
            await loadChannelBadges(channelId);
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –±–µ–π–¥–∂–∏–∫–æ–≤');
        }
        
        console.log('‚úÖ –ë–µ–π–¥–∂–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–π–¥–∂–∏–∫–æ–≤:', error);
        return false;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –±–µ–π–¥–∂–∏–∫–æ–≤
function addBadgesStyles() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
    if (document.querySelector('style#badges-styles')) {
        return;
    }
    
    const style = document.createElement('style');
    style.id = 'badges-styles';
    style.textContent = `
        .badges-container {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            margin-right: 4px;
            flex-shrink: 0;
        }
        
        .badges-container.badges-position-right {
            margin-left: 4px;
            margin-right: 0;
        }
        
        .badge {
            height: ${parseInt(size) * 1.2}px;
            vertical-align: middle;
            border-radius: 2px;
            opacity: 0.9;
        }
    `;
    document.head.appendChild(style);
    console.log('‚úÖ –°—Ç–∏–ª–∏ –¥–ª—è –±–µ–π–¥–∂–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–∏–∫–æ–≤
function setupBadgeErrorHandling() {
    document.addEventListener('error', function(event) {
        if (event.target && event.target.classList && event.target.classList.contains('badge')) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–∏–∫–∞: ${event.target.src}`);
            event.target.style.display = 'none';
        }
    }, true);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.badges = {
    init: initBadges,
    parse: parseBadges,
    createHtml: createBadgesHtml,
    addStyles: addBadgesStyles,
    setupErrorHandling: setupBadgeErrorHandling,
    loadGlobal: loadGlobalBadges,
    loadChannel: loadChannelBadges,
    getTwitchUserId: getTwitchUserId
};

console.log('‚úÖ –ú–æ–¥—É–ª—å –±–µ–π–¥–∂–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');